------------------------------------------SORU 1 CEVAP KODU:

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score

# Verisetini yükle
data = pd.read_csv('data1.csv', delimiter=';', decimal=',')

# Öznitelikleri ve hedef sütunu ayrıştır
X = data.iloc[:, :-1].values  # Bağımsız değişkenler
y = data.iloc[:, -1].values   # Hedef değişken

# Veriyi eğitim ve test olarak ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# PCA ile öznitelik çıkarımı
pca = PCA(n_components=2)  # İki bileşen seçtik (daha fazla seçebilirsiniz)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

# KNN sınıflandırma
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_pca, y_train)

# Tahmin yap
y_pred = knn.predict(X_test_pca)

# Karşıtlık matrisi (Confusion Matrix) ve doğruluk değeri
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Karşıtlık Matrisi:")
print(cm)
print("Doğruluk (Accuracy):", accuracy)


------------------------------------------SORU 1 ÇIKTIDA ALINAN SONUÇ
Karşıtlık Matrisi:
[[ 16  22]
 [  8 106]]
Doğruluk (Accuracy): 0.8026315789473685



------------------------------------------SORU 2 CEVAP KODU:

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score

# Verileri Excel dosyasından oku
data = pd.read_excel("data2.xlsx", sheet_name="data", header=None)
X = data.values  # Veri noktalarını al

# K-Means algoritmasını uygula
kmeans = KMeans(n_clusters=2, random_state=42)
kmeans.fit(X)

# Sınıflandırma sonuçlarını al
labels = kmeans.labels_

# Gerçek değerleri oku
gercek_degerler = pd.read_excel("data2.xlsx", sheet_name="sınıf", header=None)
y_true = gercek_degerler.values.flatten()

# Etiketleri sınıf numaralarına dönüştür
def convert_labels(labels):
    label_map = {labels[0]: 0}
    converted_labels = [0]
    current_label = 0
    for label in labels[1:]:
        if label not in label_map:
            current_label += 1
            label_map[label] = current_label
        converted_labels.append(label_map[label])
    return converted_labels

# Etiketleri dönüştür
converted_labels = convert_labels(labels)

# Başarı oranını hesapla
accuracy = accuracy_score(y_true, converted_labels)
print("Başarı Oranı: ", accuracy)

------------------------------------------SORU 2 ÇIKTIDA ALINAN SONUÇ
Başarı Oranı:  0.22473466520992663

------------------------------------------SORU 3 CEVAP KODU:

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np

# Veri setini yükleme
data = pd.read_csv("data3.csv", sep=";", decimal=",")

# Veri setinin ilk birkaç satırını görüntüleme
print(data.head())

# Bağımsız değişkenler (latitude, longitude ve depth)
X = data[['Latitude', 'Longitude', 'Depth']]

# Bağımlı değişken (magnitude)
y = data['Magnitude']

# Veri setini eğitim ve test kümelerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lineer regresyon modelini eğitme
model = LinearRegression()
model.fit(X_train, y_train)

# Test veri seti üzerinde tahmin yapma
y_pred = model.predict(X_test)

# RMSE değerini hesaplama
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# RMSE değerini yazdırma
print("RMSE değeri:", rmse)

------------------------------------------SORU 3 ÇIKTIDA ALINAN SONUÇ

   Latitude  Longitude  Depth  Magnitude
0    19.246    145.616  131.6        6.0
1     1.863    127.352   80.0        5.8
2   -20.579   -173.972   20.0        6.2
3   -59.076    -23.557   15.0        5.8
4    11.938    126.427   15.0        5.8
RMSE değeri: 0.4222388798355116

